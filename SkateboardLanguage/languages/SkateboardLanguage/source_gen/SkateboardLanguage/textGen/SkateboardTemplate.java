package SkateboardLanguage.textGen;

/*Generated by MPS */


public class SkateboardTemplate {
  protected String bodyType;
  protected String length;
  protected String width;
  protected String bodyColor;
  protected Boolean foldable;
  protected String wheelSize;
  protected String wheelShape;
  protected String wheelColor;
  protected Boolean wheelDecoration;
  protected String truckColor;
  protected String boltsColor;
  protected String bodyDecorationShape;
  protected String bodyDecorationColor;
  protected String bodyDecorationSize;
  protected String bodyGridTapeSize;
  protected String bodyGridTapeColor;
  protected String bodyRailsSize;
  protected String bodyRailsColor;
  protected String truckRisersSize;
  protected String truckRisersColor;

  public SkateboardTemplate(String bodyTypeInput, String lengthInput, String widthInput, String bodyColorInput, Boolean isFoldable, String wheelSizeInput, String wheelShapeInput, String wheelColorInput, Boolean isWheelDecoration, String truckColorInput, String boltsColorInput, String bodyDecorationShapeInput, String bodyDecorationColorInput, String bodyDecorationSizeInput, String bodyGridTapeSizeInput, String bodyGridTapeColorInput, String bodyRailsSizeInput, String bodyRailsColorInput, String truckRisersSizeInput, String truckRisersColorInput) {

    bodyType = bodyTypeInput;
    length = lengthInput;
    width = widthInput;
    bodyColor = bodyColorInput;
    foldable = isFoldable;
    wheelSize = wheelSizeInput;
    wheelShape = wheelShapeInput;
    wheelColor = wheelColorInput;
    wheelDecoration = isWheelDecoration;
    truckColor = truckColorInput;
    boltsColor = boltsColorInput;
    bodyDecorationShape = bodyDecorationShapeInput;
    bodyDecorationColor = bodyDecorationColorInput;
    bodyDecorationSize = bodyDecorationSizeInput;
    bodyGridTapeSize = bodyGridTapeSizeInput;
    bodyGridTapeColor = bodyGridTapeColorInput;
    bodyRailsSize = bodyRailsSizeInput;
    bodyRailsColor = bodyRailsColorInput;
    truckRisersSize = truckRisersSizeInput;
    truckRisersColor = truckRisersColorInput;
  }

  public String includes() {
    return "include <noseModule.scad>\ninclude <tailModule.scad>\ninclude <bodyModule.scad>\ninclude <truckModule.scad>\ninclude <wheelModule.scad>\n\n";
  }

  public String globals() {
    return "$fa = 1;\n$fs = 0.4;\n\n";
  }

  public String variables() {
    return "bodyType = \"" + bodyType + "\";\nlength = \"" + length + "\";\nwidth = \"" + width + "\";\nwheelSize = \"" + wheelSize + "\";\nwheelShape = \"" + wheelShape + "\";\nboltsColor = \"" + boltsColor + "\";\nfoldable = " + foldable + ";\nbodyColor = \"" + bodyColor + "\";\ntruckColor = \"" + truckColor + "\";\nwheelColor = \"" + wheelColor + "\";\nbodyDecorationShape = \"" + bodyDecorationShape + "\";\nbodyDecorationColor = \"" + bodyDecorationColor + "\";\nbodyDecorationSize = \"" + bodyDecorationSize + "\";\nwheelDecoration = " + wheelDecoration + ";\nbodyGridTapeSize = \"" + bodyGridTapeSize + "\";\nbodyGridTapeColor = \"" + bodyGridTapeColor + "\";\nbodyRailsColor = \"" + bodyRailsColor + "\";\nbodyRailsSize = \"" + bodyRailsSize + "\";\ntruckRisersSize = \"" + truckRisersSize + "\";\ntruckRisersColor = \"" + truckRisersColor + "\";\n\n";
  }

  public String mainModule() {
    return "carverSelected =\n (bodyType == \"carver\") ? true:false;\n\n//Body parameters\nbodyWidth = \n (width == \"small\") ? 16:\n (width == \"large\") ? 20:18;\n  \nbodyLength = 36;\nbodyGridTapeLength = \n (length == \"short\") ? 27: \n (length == \"long\") ? 54:36;\n\nbodyLengthScale = \n (length == \"short\") ? 0.75:\n (length == \"long\")  ? 1.5:1; \n \nundersideDecorationSize = \n (bodyDecorationSize == \"small\") ? 3:\n (bodyDecorationSize == \"large\") ? 7:5;\n \ngridTapeScale = \n (width == \"small\") ? 3.25 : \n (width == \"large\") ? 3 : 3.1;\n \nrailsSize = \n (bodyRailsSize == \"none\")  ? 0 :\n (bodyRailsSize == \"short\") ? 22 : \n (bodyRailsSize == \"long\")  ? 30 : 26;\n \n//Nose parameters\nnosePositionFactor = \n (length == \"short\") ? 2.8:\n (length == \"long\")  ? 1.35:2;\n \n//Truck parameters\ntruckPositionFactor = \n (bodyType == \"downhill\" && length == \"short\")  ? bodyLength - (bodyLength / 2.1) :\n (bodyType == \"downhill\" && length == \"medium\") ? bodyLength - (bodyLength / 3) :\n (bodyType == \"downhill\" && length == \"long\")   ? bodyLength - (bodyLength / 12) :\n (length == \"short\")  ? bodyLength / 3 :\n (length == \"long\")   ? bodyLength / 1.5 : bodyLength / 2;\n \nrisersSize = \n (truckRisersSize == \"none\")  ? 0 : \n (truckRisersSize == \"short\") ? 0.5 : \n (truckRisersSize == \"tall\")  ? 1.5 : 1;\n \n//Wheel parameters\nwheelRadius = \n (wheelSize == \"small\") ? 1.5 : \n (wheelSize == \"large\") ? 2.5 : 2;\n \nwheelScaleFactor = \n (wheelSize == \"small\") ? 3 :\n (wheelSize == \"large\") ? 1 : 2;\n \nsphericalSelected = \n (wheelShape == \"spherical\") ? true : false;\n \ntruckBaseHeight = 0.5;\ntruckWidth = 14;\nwheelLength = 3;\n \nwheelXCoordinate = truckPositionFactor;\nwheelYCoordinate = (truckWidth / 2) - wheelLength + 1.3;\nwheelZCoordinate = (truckBaseHeight * wheelScaleFactor) + wheelRadius + risersSize + 0.3;\n\n\n//Building the object\nbody(bodyWidth, bodyLength, bodyLengthScale, bodyColor, bodyGridTapeSize, bodyGridTapeLength, bodyGridTapeColor, bodyDecorationShape, bodyDecorationColor, undersideDecorationSize, carverSelected, foldable, railsSize, bodyRailsColor);\n\n\ntranslate([-bodyLength / nosePositionFactor + 0.001, 0, 0])\n    nose(bodyType, bodyWidth, bodyColor, bodyGridTapeSize, bodyGridTapeColor, gridTapeScale);\ntranslate([bodyLength / nosePositionFactor + 0.001, 0, 0])\n    tail(bodyType, bodyWidth, bodyColor, bodyGridTapeSize, bodyGridTapeColor, gridTapeScale);\n\n    \nrotate([0, 0, 90]) {\n    translate([0, truckPositionFactor, -truckBaseHeight])\n        truck(truckBaseHeight, truckWidth, truckColor, boltsColor, risersSize, truckRisersColor);\n    translate([0, -truckPositionFactor, -truckBaseHeight])\n        truck(truckBaseHeight, truckWidth, truckColor, boltsColor, risersSize, truckRisersColor);\n}\n\ncolor(wheelColor) {\n    translate([wheelXCoordinate, wheelYCoordinate, -wheelZCoordinate])\n        wheel(wheelLength, wheelRadius, sphericalSelected, wheelDecoration);\n    translate([wheelXCoordinate, -wheelYCoordinate, -wheelZCoordinate])\n        wheel(wheelLength, wheelRadius, sphericalSelected, wheelDecoration);\n    translate([-wheelXCoordinate, wheelYCoordinate, -wheelZCoordinate])\n        wheel(wheelLength, wheelRadius, sphericalSelected, wheelDecoration);\n    translate([-wheelXCoordinate, -wheelYCoordinate, -wheelZCoordinate])\n        wheel(wheelLength, wheelRadius, sphericalSelected, wheelDecoration);\n}";
  }

  public String mainTemplate() {
    return includes() + globals() + variables() + mainModule();
  }
}
