package SkateboardLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Body;
  private ConceptPresentation props_BoltsColor;
  private ConceptPresentation props_Color;
  private ConceptPresentation props_Decoration;
  private ConceptPresentation props_DecorationShape;
  private ConceptPresentation props_DecorationSize;
  private ConceptPresentation props_Foldable;
  private ConceptPresentation props_Gridtape;
  private ConceptPresentation props_GridtapeColor;
  private ConceptPresentation props_GridtapeSize;
  private ConceptPresentation props_Length;
  private ConceptPresentation props_Rails;
  private ConceptPresentation props_RailsSize;
  private ConceptPresentation props_Risers;
  private ConceptPresentation props_RisersColor;
  private ConceptPresentation props_RisersSize;
  private ConceptPresentation props_Skateboard;
  private ConceptPresentation props_Truck;
  private ConceptPresentation props_TruckColor;
  private ConceptPresentation props_Wheel;
  private ConceptPresentation props_WheelDecoration;
  private ConceptPresentation props_WheelShape;
  private ConceptPresentation props_WheelSize;
  private ConceptPresentation props_Width;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Body:
        if (props_Body == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Body");
          props_Body = cpb.create();
        }
        return props_Body;
      case LanguageConceptSwitch.BoltsColor:
        if (props_BoltsColor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BoltsColor");
          props_BoltsColor = cpb.create();
        }
        return props_BoltsColor;
      case LanguageConceptSwitch.Color:
        if (props_Color == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Color");
          props_Color = cpb.create();
        }
        return props_Color;
      case LanguageConceptSwitch.Decoration:
        if (props_Decoration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Decoration");
          props_Decoration = cpb.create();
        }
        return props_Decoration;
      case LanguageConceptSwitch.DecorationShape:
        if (props_DecorationShape == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DecorationShape");
          props_DecorationShape = cpb.create();
        }
        return props_DecorationShape;
      case LanguageConceptSwitch.DecorationSize:
        if (props_DecorationSize == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DecorationSize");
          props_DecorationSize = cpb.create();
        }
        return props_DecorationSize;
      case LanguageConceptSwitch.Foldable:
        if (props_Foldable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Foldable");
          props_Foldable = cpb.create();
        }
        return props_Foldable;
      case LanguageConceptSwitch.Gridtape:
        if (props_Gridtape == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Gridtape");
          props_Gridtape = cpb.create();
        }
        return props_Gridtape;
      case LanguageConceptSwitch.GridtapeColor:
        if (props_GridtapeColor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("GridtapeColor");
          props_GridtapeColor = cpb.create();
        }
        return props_GridtapeColor;
      case LanguageConceptSwitch.GridtapeSize:
        if (props_GridtapeSize == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("GridtapeSize");
          props_GridtapeSize = cpb.create();
        }
        return props_GridtapeSize;
      case LanguageConceptSwitch.Length:
        if (props_Length == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Length");
          props_Length = cpb.create();
        }
        return props_Length;
      case LanguageConceptSwitch.Rails:
        if (props_Rails == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Rails");
          props_Rails = cpb.create();
        }
        return props_Rails;
      case LanguageConceptSwitch.RailsSize:
        if (props_RailsSize == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("RailsSize");
          props_RailsSize = cpb.create();
        }
        return props_RailsSize;
      case LanguageConceptSwitch.Risers:
        if (props_Risers == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Risers");
          props_Risers = cpb.create();
        }
        return props_Risers;
      case LanguageConceptSwitch.RisersColor:
        if (props_RisersColor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("RisersColor");
          props_RisersColor = cpb.create();
        }
        return props_RisersColor;
      case LanguageConceptSwitch.RisersSize:
        if (props_RisersSize == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("RisersSize");
          props_RisersSize = cpb.create();
        }
        return props_RisersSize;
      case LanguageConceptSwitch.Skateboard:
        if (props_Skateboard == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Skateboard = cpb.create();
        }
        return props_Skateboard;
      case LanguageConceptSwitch.Truck:
        if (props_Truck == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Truck");
          props_Truck = cpb.create();
        }
        return props_Truck;
      case LanguageConceptSwitch.TruckColor:
        if (props_TruckColor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TruckColor");
          props_TruckColor = cpb.create();
        }
        return props_TruckColor;
      case LanguageConceptSwitch.Wheel:
        if (props_Wheel == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Wheel");
          props_Wheel = cpb.create();
        }
        return props_Wheel;
      case LanguageConceptSwitch.WheelDecoration:
        if (props_WheelDecoration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("WheelDecoration");
          props_WheelDecoration = cpb.create();
        }
        return props_WheelDecoration;
      case LanguageConceptSwitch.WheelShape:
        if (props_WheelShape == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("WheelShape");
          props_WheelShape = cpb.create();
        }
        return props_WheelShape;
      case LanguageConceptSwitch.WheelSize:
        if (props_WheelSize == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("WheelSize");
          props_WheelSize = cpb.create();
        }
        return props_WheelSize;
      case LanguageConceptSwitch.Width:
        if (props_Width == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Width");
          props_Width = cpb.create();
        }
        return props_Width;
    }
    return null;
  }
}
